% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ATE_ext_cf.R
\name{ATE_ext_cf}
\alias{ATE_ext_cf}
\title{Transporting ATE from multi-source population to an external source-specific population}
\usage{
ATE_ext_cf(
  X,
  X_external,
  Y,
  S,
  A,
  source_model = "glmnet.multinom",
  source_model_args = list(),
  treatment_model_type = "separate",
  treatment_model = "SuperLearner",
  treatment_model_args = list(),
  external_model = "SuperLearner",
  external_model_args = list(),
  outcome_model = "SuperLearner",
  outcome_model_args = list(),
  replications = 10L
)
}
\arguments{
\item{X}{The covariate data frame with \eqn{n=n_1+...+n_m} rows and q coloums.}

\item{X_external}{The covariate data frame with \eqn{n_0} rows and q coloums.}

\item{Y}{The (binary/continuous) outcome, which is a length \eqn{n} vector.}

\item{S}{The (numeric) source which is a length \eqn{n} vector.}

\item{A}{The (binary) treatment, which is a length \eqn{n} vector.}

\item{source_model}{The multi-nomial model for estimating \eqn{P(S=s|X)}. It has two options: \code{glmnet.multinom} and \code{nnet.multinom}. The default is \code{glmnet.multinom}.}

\item{source_model_args}{The arguments (in \pkg{SuperLearner}) for the source model.}

\item{treatment_model_type}{The options for how the treatment_model \eqn{P(A=1|X, S=s)} is estimated. It includes \code{separate} and \code{joint}, with the default being \code{separate}. When \code{separate} is selected,
\eqn{P(A=1|X, S=s)} is estimated by fitting the model (regressing \eqn{A} on \eqn{X}) within each specific internal source population (S=s). When \code{joint} is selected, \eqn{P(A=1|X, S=s)}
is estimated by fitting the model (regressing \eqn{A} on \eqn{X} and \eqn{S}) using the multi-source population and then estimating the probability by fitting the model while suppressing the \eqn{S=s}.
In both cases, the propensity score is calculated as \eqn{P(A=1|X)=\sum_{s=1}^{m}P(A=1|X, S=s)P(S=s|X)}.}

\item{treatment_model}{The treatment model \eqn{P(A=1|X, S=s)} is estimated using \pkg{SuperLearner}. If, for example, the preference is to use only logistic regression for the probability estimation,
please ensure that only \code{glm} is included in the \pkg{SuperLearner} library within the \code{treatment_model_args}.}

\item{treatment_model_args}{The arguments (in \pkg{SuperLearner}) for the treatment model.}

\item{external_model}{The R model \eqn{P(R=1|W)} is estimated using \pkg{SuperLearner}. R is a binary variable indicating the multi-source data, i.e., R is 1 if the subject belongs to the multi-source data and 0 if the subject belongs to the external data.
W is combination of X and X_external, i.e., W=rbind(X, X_external)}

\item{external_model_args}{= list(),}

\item{outcome_model}{The same as \code{treatment_model}.}

\item{outcome_model_args}{The arguments (in \pkg{SuperLearner}) for the outcome model.}
}
\value{
An object of class "ATE_ext". This object is a list with the following elements:
  \item{df_dif}{A data frame containing the treatment effect (mean difference) estimates for the extenal data.}
  \item{df_A0}{A data frame containing the potential outcome mean estimates under A = 0 for the extenal data.}
  \item{df_A1}{A data frame containing the potential outcome mean estimates under A = 1 for the extenal data.}
  \item{fit_outcome}{Fitted outcome model.}
  \item{fit_source}{Fitted source model.}
  \item{fit_treatment}{Fitted treatment model(s).}
  \item{fit_external}{Fitted external model.}
}
\description{
Doubly-robust and efficient estimator for the average treatment effect of an external target population using \eqn{m} multi-source data.
}
\details{
Data structure: multi-source data contain outcome Y, source S, treatment A, and covariates X (\eqn{n \times p}); external data contain only covariate X_external (\eqn{n_0 \times p}).
Once X and X_external are defined, The indicator of multi-source data, R, can be defined, i.e., R is 1 if the subject belongs to the multi-source data and 0 if the subject belongs to the external data.
The estimator is doubly robust and non-parametrically efficient. Three nuisance parameters are estimated,
the R model \eqn{q(X)=P(R=1|X)}, the propensity score model \eqn{\eta_a(X)=P(A=a|X)}, and the outcome model \eqn{\mu_a(X)=E(Y|X, A=a)}. The nuisance parameters are allowed to be estimated by \pkg{SuperLearner}. The estimator is
\deqn{
 \dfrac{\widehat \kappa}{N}\sum\limits_{i=1}^{N} \Bigg[ I(R_i = 0) \widehat \mu_a(X_i)
 +I(A_i = a, R_i=1) \dfrac{1-\widehat q(X_i)}{\widehat \eta_a(X_i)\widehat q(X_i)}  \Big\{ Y_i - \widehat \mu_a(X_i) \Big\} \Bigg],
}
where \eqn{N=n+n_0}, and \eqn{\widehat \kappa=\{N^{-1} \sum_{i=1}^N I(R_i=0)\}^{-1}}.
To achieve the non-parametrical efficiency and asymptotic normality, it requires that \eqn{||\widehat \mu_a(X) -\mu_a(X)||\big\{||\widehat \eta_a(X) -\eta_a(X)||+||\widehat q(X) -q(X)||\big\}=o_p(n^{-1/2})}.
In addition, to avoid the Donsker class assumption, the estimation is done by sample splitting and cross-fitting.
When one source of data is a randomized trial, it is still recommended to estimate the propensity score for optimal efficiency.
Since the non-parametric influence function is the same as the efficient semi-parametric efficient influence function when the propensity score is known and incorporating the assumption \eqn{Y\perp S|(X, A=a)}, the inference stays the same.
}
\references{
Dahabreh, I.J., Robertson, S.E., Petito, L.C., Hernán, M.A. and Steingrimsson, J.A.. (2019) \emph{Efficient and robust methods for causally
interpretable meta‐analysis: Transporting inferences from multiple randomized trials to a target population}, Biometrics.
}
